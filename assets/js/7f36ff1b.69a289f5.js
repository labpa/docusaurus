"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[931],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),o=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=o(e.components);return r.createElement(u.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=o(t),c=i,g=d["".concat(u,".").concat(c)]||d[c]||m[c]||a;return t?r.createElement(g,l(l({ref:n},p),{},{components:t})):r.createElement(g,l({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=c;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[d]="string"==typeof e?e:i,l[1]=s;for(var o=2;o<a;o++)l[o]=t[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},4870:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>o});var r=t(7462),i=(t(7294),t(3905));const a={},l="JavaScript",s={unversionedId:"JavaScript/JavaScript",id:"JavaScript/JavaScript",title:"JavaScript",description:"Unit-Tests",source:"@site/docs/JavaScript/JavaScript.md",sourceDirName:"JavaScript",slug:"/JavaScript/",permalink:"/docusaurus/JavaScript/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/JavaScript/JavaScript.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Formeln",permalink:"/docusaurus/Formeln/"},next:{title:"JS-Hero L\xf6sungen",permalink:"/docusaurus/JavaScript/JS-Hero/"}},u={},o=[{value:"Unit-Tests",id:"unit-tests",level:2},{value:"JavaScript-Programme",id:"javascript-programme",level:2},{value:"Variablen",id:"variablen",level:2},{value:"Funktionen",id:"funktionen",level:2},{value:"Funktionsaufruf",id:"funktionsaufruf",level:3},{value:"Funktionen mit Parameter",id:"funktionen-mit-parameter",level:3},{value:"Strings",id:"strings",level:2},{value:"String: length",id:"string-length",level:3},{value:"Logging",id:"logging",level:2},{value:"Arrays",id:"arrays",level:2}],p={toc:o},d="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"javascript"},"JavaScript"),(0,i.kt)("h2",{id:"unit-tests"},"Unit-Tests"),(0,i.kt)("p",null,"Unit-Test, auch Modultest oder Komponententest, ist ein Softwareentwicklungsprozess, bei dem die kleinsten pr\xfcfbaren Teile oder Einheiten einer Anwendung, die so genannten Units, einzeln und unabh\xe4ngig voneinender auf ihren Ordnungsgem\xe4\xdfen Betrieb hin untersucht werden.  "),(0,i.kt)("p",null,"Die Idee ist, bei einer gegebenen Anforderung zuerst entsprechende Tests zu schreiben und anschlie\xdfend das geforderte Programm. Dies hat den Vorteil, dass man jederzeit anhand der Tests \xfcberpr\xfcfen kann ob die Anforderung erf\xfcllt oder nicht erf\xfcllt ist."),(0,i.kt)("h2",{id:"javascript-programme"},"JavaScript-Programme"),(0,i.kt)("p",null,"JavaScript- Programme bestehen aus einer Reihe von ANweisungen. Jede ANweisung f\xfchrt eine ",(0,i.kt)("strong",{parentName:"p"},"elementare Operation")," durch. Durch das Ausf\xfchren vieler Anweisungen kann man schlie\xdflich komplexe Aufgaben l\xf6sen. Jede Anweisung schreibt man in eine Zeile und schlie\xdft sie mit einem Semikolon ab."),(0,i.kt)("h2",{id:"variablen"},"Variablen"),(0,i.kt)("p",null,"Eine elementare Anweisung ist die Deklaration und Initialisierung einer Variablen. In der Programmierung ist eine Variable ein Beh\xe4lter f\xfcr einen Wert. Mit der Anweisung  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"let stadt = 'Prag';\n")),(0,i.kt)("p",null,"deklariert man eine Variable mit dem Namen stadt und initialisiert sie mit dem Wert 'Prag'. Mit dem Schl\xfcsselwort ",(0,i.kt)("strong",{parentName:"p"},"let")," wird die Variable deklariert. Mit dem Gleichheitszeichen, dem Zuweisungsoperator, weist man der Variablen einen Wert zu. "),(0,i.kt)("p",null,"Beachte: JavaScript unterscheidet in Gro\xdf- und Kleinbuchstaben. stadt und Stadt sind zwei verschiedene Variablen. Man sagt auch: ",(0,i.kt)("em",{parentName:"p"},"JavaScript ist case sensitive"),"."),(0,i.kt)("h2",{id:"funktionen"},"Funktionen"),(0,i.kt)("p",null,"Eine Funktion ist ein Block von Anweisungen, der beliebig oft ausgef\xfchrt werden kann. Eine Funktion kann Parameter entgegennehmen und eine Funktion kann einen Wert zur\xfcckgeben. Funktionen kann man in JavaScript auf verschiedene Weisen definieren. Die vielleicht gebr\xe4uchlichste ist die sogenannte Funktionsdeklaration. Sie wird mit dem Schl\xfcsselwort ",(0,i.kt)("em",{parentName:"p"},"function")," eingeleitet. Es folgen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"der Name der Funktion,"),(0,i.kt)("li",{parentName:"ul"},"die Parameter eingeschlossen in runde Klammern,"),(0,i.kt)("li",{parentName:"ul"},"die Anweisungen eingeschlossen in geschweiften Klammern.")),(0,i.kt)("p",null,"Mit dem Schl\xfcsselwort ",(0,i.kt)("em",{parentName:"p"},"return")," kann ein Wert zur\xfcckgegeben werden. Gleichzeitig beendet ",(0,i.kt)("em",{parentName:"p"},"return")," die Funktion. Anweisungen nach einem return werden nicht mehr ausgef\xfchrt. Mit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"function farbe(){\n    return 'gr\xfcn';\n}\n")),(0,i.kt)("p",null,"definieren wir eine Funktion mit Namen farbe, die 'gr\xfcn' zur\xfcckgibt. Die Funktion nimmt keine Parameter entgegen (die runde Klammer ist leer) und sie enth\xe4lt genau eine Anweisung, die R\xfcckgabe. ",(0,i.kt)("em",{parentName:"p"},"Die Funktion wird nicht mit einem Semikolon abgeschlossen.")),(0,i.kt)("p",null,"\xdcber ihren Namen wird die Funktion aufgerufen:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"let ergebnis = farbe();\n")),(0,i.kt)("p",null,"Jetzt wird die Funktion ausgef\xfchrt. Ihre R\xfcckgabe wird der Variablen ergebnis zugewiesen. ergebnis hat dann den Wert 'gr\xfcn'."),(0,i.kt)("h3",{id:"funktionsaufruf"},"Funktionsaufruf"),(0,i.kt)("p",null,"Wichtig ist der Unterscheid zwischen der Definition und dem Aufruf einer Funktion. Mit der Definition, z.B."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"function f() {\n    return 'hallo';\n}\n")),(0,i.kt)("p",null,"wird festgelegt, was die Funktion machen soll. Sie wird dabei nicht ausgef\xfchrt. Sie wird ledigleich zur Ausf\xfchrung bereitgestellt. Erst mit dem Aufruf "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"let x = f();\n")),(0,i.kt)("p",null,"wird die Funktion ausgef\xfchrt. Dann werden die Anweisungen im Funktionsblock der Reihe nach abgearbeitet. Die R\xfcckgabe der Funktion wird in diesem Beispiel der Variablen ",(0,i.kt)("em",{parentName:"p"},"x")," zugewiesen. ",(0,i.kt)("em",{parentName:"p"},"x")," erh\xe4lt den Wert ",(0,i.kt)("em",{parentName:"p"},"'hallo'"),". Definiert wurde die Funktion mit dem Schl\xfcsselwort ",(0,i.kt)("em",{parentName:"p"},"function"),". Aufgerufen werden die Funktionen \xfcber ihren Namen."),(0,i.kt)("h3",{id:"funktionen-mit-parameter"},"Funktionen mit Parameter"),(0,i.kt)("p",null,"Funktionen mit Parametern. Mit "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function gebe(eingabe) {\n    return eingabe;\n}\n")),(0,i.kt)("p",null,"definieren wir eine Funktion, die den \xfcbergebenen Parameter ",(0,i.kt)("strong",{parentName:"p"},"eingabe")," einfach wieder zur\xfcckgibt. Parameter sind VAriablen. Sie stehen in der runden Klammer und ben\xf6tigen nicht das Schl\xfcsselwort ",(0,i.kt)("strong",{parentName:"p"},"let")," zu ihrer Deklaration. Mit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let ergebnis =gelbe('Apfel');\n")),(0,i.kt)("p",null,"wird die Funktion mit dem Argument ",(0,i.kt)("strong",{parentName:"p"},"'Apfel'")," aufgerufen. "),(0,i.kt)("h2",{id:"strings"},"Strings"),(0,i.kt)("p",null,"Eine Variable ist ein Beh\xe4lter f\xfcr einen Wert. Ein Wert kann ein Text wie ",(0,i.kt)("strong",{parentName:"p"},"'Hallo Welt!")," sein. Werte besitzen dabei einen Typ. Der Typ von ",(0,i.kt)("strong",{parentName:"p"},"'Hallo Welt'")," ist string. Um aus einem Text einen String zu machen, kann man einfache oder doppelte Anf\xfchrungszeichen verwenden. So ist ",(0,i.kt)("strong",{parentName:"p"},"'Hallo Welt!'")," derselbe String wie ",(0,i.kt)("strong",{parentName:"p"},'"Hallo Welt!"'),"."),(0,i.kt)("p",null,"Mit Strings kann man arbeiten. Man kann sie zum Beispiel verketten. Dies macht man mit dem ",(0,i.kt)("strong",{parentName:"p"},"+")," Zeichen. ",(0,i.kt)("strong",{parentName:"p"},"'Blau'"),"+",(0,i.kt)("strong",{parentName:"p"},"'meier'")," ergibt den String ",(0,i.kt)("strong",{parentName:"p"},"'Blaumeier'"),"."),(0,i.kt)("p",null,"Die folgende Funktion h\xe4ngt an dem \xfcbergebenem Parameter einen Text an und gibt den zusammengesetzten Text zur\xfcck:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function praise(name) {\n    return name+ ' ist toll!'; \n}\n")),(0,i.kt)("p",null,"So liefert ",(0,i.kt)("strong",{parentName:"p"},"praise('JavaScript')")," den Wert Wert ",(0,i.kt)("strong",{parentName:"p"},"'JavaScript ist toll!'"),"."),(0,i.kt)("h3",{id:"string-length"},"String: length"),(0,i.kt)("p",null,"Strings besitzen die "),(0,i.kt)("h2",{id:"logging"},"Logging"),(0,i.kt)("p",null,"Programmieren beinhaltet immer auch die Suche nach Fehlern. Eine M\xf6glichkeit Fehler zu finden ist das ",(0,i.kt)("strong",{parentName:"p"},"Loggen"),". Man macht w\xe4hrend der Programmausf\xfchrung geziehlte Ausgaben. In JavaScript verwendet man daf\xfcr die Function ",(0,i.kt)("strong",{parentName:"p"},"console.log"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"console.log('Hallo Konsole!');\n")),(0,i.kt)("p",null,"Hier wird der String ",(0,i.kt)("strong",{parentName:"p"},"'Hallo Konsole!'")," ,it ",(0,i.kt)("strong",{parentName:"p"},"console.log")," ausgegeben."),(0,i.kt)("h2",{id:"arrays"},"Arrays"),(0,i.kt)("p",null,"Arrays sind Objekte zur Speicherung vieler, meist \xe4hnlicher Werte. Diese sogenannten Elemente werden in einem Array der Reihe nach abgelegt. Arrays erzeugt man am besten mit eckigen Klammern."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-JS"},"let sprachen = ['C', 'C++', 'Java', 'JavaScript'];\nlet primzahlen = [2, 3, 5, 7, 11];\nlet leeresArray = [];\nlet a = 'Douglas';\nlet b = 12;\nlet c = true;\nlet allesMoegliche = [a, b, c];\n")),(0,i.kt)("p",null,"Die Elemente eines Arrays k\xf6nnen alle einen anderen Datentyp besitzen."))}m.isMDXComponent=!0}}]);