"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[147],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),o=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=o(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=u(e,["components","mdxType","originalType","parentName"]),c=o(n),p=r,g=c["".concat(s,".").concat(p)]||c[p]||d[p]||a;return n?i.createElement(g,l(l({ref:t},m),{},{components:n})):i.createElement(g,l({ref:t},m))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=p;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[c]="string"==typeof e?e:r,l[1]=u;for(var o=2;o<a;o++)l[o]=n[o];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2937:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>u,toc:()=>o});var i=n(7462),r=(n(7294),n(3905));const a={},l="Algorithmen",u={unversionedId:"java/Algorithmen/Algorithmen",id:"java/Algorithmen/Algorithmen",title:"Algorithmen",description:"Algorithmus zum Suchen in einer Liste",source:"@site/docs/java/Algorithmen/Algorithmen.md",sourceDirName:"java/Algorithmen",slug:"/java/Algorithmen/",permalink:"/docusaurus/java/Algorithmen/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/Algorithmen/Algorithmen.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java",permalink:"/docusaurus/java/"},next:{title:"Funktionen",permalink:"/docusaurus/java/funktionen"}},s={},o=[{value:"Algorithmus zum Suchen in einer Liste",id:"algorithmus-zum-suchen-in-einer-liste",level:2},{value:"iterativ - Lineare Suche",id:"iterativ---lineare-suche",level:3},{value:"rekursiv Bin\xe4re Suche",id:"rekursiv-bin\xe4re-suche",level:3},{value:"Sortieren mit Bubble Sort - iterativer Algorithmus",id:"sortieren-mit-bubble-sort---iterativer-algorithmus",level:2},{value:"Code Bubble Sort - Aufsteigende Sortierung",id:"code-bubble-sort---aufsteigende-sortierung",level:3},{value:"Unit-Test Bubble Sort",id:"unit-test-bubble-sort",level:4},{value:"Code Bubble Sort - Absteigend Sortiert",id:"code-bubble-sort---absteigend-sortiert",level:3},{value:"Rechnen",id:"rechnen",level:2},{value:"Maxi",id:"maxi",level:3},{value:"Mini",id:"mini",level:3},{value:"Avg",id:"avg",level:3},{value:"Avg - lange Version",id:"avg---lange-version",level:4},{value:"Summe",id:"summe",level:4},{value:"Avg2 - Aufruf mit Funktion Sum",id:"avg2---aufruf-mit-funktion-sum",level:4}],m={toc:o},c="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,i.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"algorithmen"},"Algorithmen"),(0,r.kt)("h2",{id:"algorithmus-zum-suchen-in-einer-liste"},"Algorithmus zum Suchen in einer Liste"),(0,r.kt)("h3",{id:"iterativ---lineare-suche"},"iterativ - Lineare Suche"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    //Funktion gibt es nur einmal und ist unabh\xe4ngig von anderen Daten\n    //\xdcbergabe: die Liste mit werten, was wird gesucht\n    //R\xfcckgabe: index des gesuchten Elements /wenn nicht gefunden, dann -1\n    public static int Linear(List<Integer> liste, int suche)\n    {\n        int index = -1;     //index nicht gefunden\n        \n        int anzahl = liste.size();\n        for(int i = 0; i<anzahl; i ++)\n        {\n            if(liste.get(i) == suche)\n            {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n")),(0,r.kt)("h3",{id:"rekursiv-bin\xe4re-suche"},"rekursiv Bin\xe4re Suche"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    //Funktion f\xfcr bin\xe4re Suche / Iterativ\n    //\xdcbergabe: linke Grenze, rechte Grenze, gesucht Wert\n    //R\xfcckgabe: index des gesuchten Wertes / wenn nicht gefunden, dann -1\n    public static int Binaer(List<Integer> liste, int linke, int rechte, int suche)\n    {\n        if(linke==rechte)\n        {\n            if(liste.get(linke) == suche)\n            {\n                return linke;\n            }\n            else\n            {\n                return -1;\n            }\n        }\n\n        //Mitte berechnen\n        int mitte = (linke + rechte) / 2;\n        \n        //Pr\xfcfe, ob gefunden\n        if(liste.get(mitte) == suche)\n        {\n            return mitte;\n        }\n        else if(suche < liste.get(mitte))\n        {\n            return Binaer(liste, linke, mitte-1, suche);\n        }\n        else\n        {\n            return Binaer(liste, mitte+1, rechte,  suche);\n        }\n    }\n")),(0,r.kt)("h2",{id:"sortieren-mit-bubble-sort---iterativer-algorithmus"},"Sortieren mit Bubble Sort - iterativer Algorithmus"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Runde")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"von index = 0 ... 9 --\x3e tauschen"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:2},(0,r.kt)("li",{parentName:"ol"},"Runde")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"von index = 0 ... 8 --\x3e tauschen"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:3},(0,r.kt)("li",{parentName:"ol"},"Runde")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"von index = 0 ... 7 --\x3e tauschen"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:4},(0,r.kt)("li",{parentName:"ol"},"Runde")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"von index = 0 ... 6 --\x3e tauschen"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:5},(0,r.kt)("li",{parentName:"ol"},"Runde")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"von index = 0 ... 5 --\x3e tauschen"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:6},(0,r.kt)("li",{parentName:"ol"},"Runde")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"von index = 0 ... 4 --\x3e tauschen"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:7},(0,r.kt)("li",{parentName:"ol"},"Runde")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"von index = 0 ... 3 --\x3e tauschen"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:8},(0,r.kt)("li",{parentName:"ol"},"Runde")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"von index = 0 ... 2 --\x3e tauschen"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:9},(0,r.kt)("li",{parentName:"ol"},"Runde")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"von index = 0 ... 1 --\x3e tauschen")))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Alt text",src:n(9629).Z,width:"1244",height:"510"})),(0,r.kt)("h3",{id:"code-bubble-sort---aufsteigende-sortierung"},"Code Bubble Sort - Aufsteigende Sortierung"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public static void BubbleSort(List<Integer> liste)\n    {\n        int anzahl = liste.size();\n        \n        for(int zahl = anzahl -1; zahl > 0; zahl--)\n        {\n            for(int index = 0; index < zahl; index++)\n            {\n                if(liste.get(index) > liste.get(index+1))\n                {\n                    int temp = liste.get(index);\n                    liste.set(index, liste.get(index+1));\n                    liste.set(index+1,  temp);\n                }\n            }\n        }\n    }\n")),(0,r.kt)("h4",{id:"unit-test-bubble-sort"},"Unit-Test Bubble Sort"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Test\n    void testBubble() {\n        List<Integer> liste = new ArrayList<Integer>();\n        liste.add(23);\n        liste.add(12);\n        liste.add(99);\n        liste.add(67);\n        \n        List<Integer> erwartet = new ArrayList<>();\n        erwartet.add(12);\n        erwartet.add(23);\n        erwartet.add(67);\n        erwartet.add(99);\n        \n        Sort.BubbleSort(liste);\n        \n        Assert.assertEquals(liste,  erwartet);\n    }\n")),(0,r.kt)("h3",{id:"code-bubble-sort---absteigend-sortiert"},"Code Bubble Sort - Absteigend Sortiert"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    public static void BubbleSortDown(List<Integer> liste)\n    {\n        int anzahl = liste.size();\n        \n        for(int zahl = anzahl -1; zahl > 0; zahl--)\n        {\n            for(int index = 0; index < zahl; index++)\n            {\n                if(liste.get(index) < liste.get(index+1))\n                {\n                    int temp = liste.get(index);\n                    liste.set(index, liste.get(index+1));\n                    liste.set(index+1,  temp);\n                }\n            }\n        }\n    }\n")),(0,r.kt)("h2",{id:"rechnen"},"Rechnen"),(0,r.kt)("h3",{id:"maxi"},"Maxi"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    public static int Maxi(List<Integer> liste)\n    {\n        // [1, 2, 3, 9 ,3 ]\n        int maxi = Integer.MIN_VALUE;\n        \n        for (int current: liste)\n        {\n            if(maxi < current)\n            {\n                maxi = current;\n            }\n        }\n        return maxi;\n    }\n")),(0,r.kt)("h3",{id:"mini"},"Mini"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    public static int Mini(List<Integer> liste)\n    {\n        // [23, 12, 99, 67 ]\n        int mini = Integer.MAX_VALUE;\n        \n        for (int current: liste)\n        {\n            if(mini > current)\n            {\n                mini = current;\n            }\n        }\n        return mini;\n    }\n")),(0,r.kt)("h3",{id:"avg"},"Avg"),(0,r.kt)("h4",{id:"avg---lange-version"},"Avg - lange Version"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    public static double Avg(List<Integer> liste)\n    {\n        double avg = 0;\n        double sum = 0;\n        int anzahl = liste.size();\n        \n        //Summe aller werte\n        for(int i = 0; i < anzahl; i++)\n        {\n            sum = sum + liste.get(i);\n        }\n        \n        //geteilt durch anzahl werte\n        avg = sum / anzahl;\n        \n        return avg;\n    }\n")),(0,r.kt)("h4",{id:"summe"},"Summe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    public static int Sum(List<Integer> liste)\n    {\n        int anzahl = liste.size();\n        int sum = 0;\n        \n        for(int i = 0; i < anzahl; i++)\n        {\n            sum = sum + liste.get(i);\n        }\n        \n        return sum;\n    }\n")),(0,r.kt)("h4",{id:"avg2---aufruf-mit-funktion-sum"},"Avg2 - Aufruf mit Funktion Sum"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    public static double Avg2(List<Integer> liste)\n    {\n         return Sum(liste) / liste.size();\n    }\n")))}d.isMDXComponent=!0},9629:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/pseudocodeBubble-160ac5a254376716171922a8a313bacc.png"}}]);